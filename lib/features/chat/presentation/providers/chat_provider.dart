import 'package:stargazer/core/services/domain/usecases/send_message.dart';
import 'package:flutter/material.dart';
import 'package:stargazer/core/services/domain/entities/chat_message.dart';

class ChatProvider with ChangeNotifier {
  final SendMessage _sendMessage;
  static const int MESSAGE_LIMIT = 50;
  // final RateLimiter _rateLimiter =
  //     RateLimiter(); // This field is currently unused

  final List<ChatMessage> _messages = [];
  bool _isLoading = false;
  final ConversationContext _context = ConversationContext();

  ChatProvider(this._sendMessage) {
    _initializeConversation();
  }

  void _initializeConversation() {
    _addSystemMessage('''
üîÆ Xin ch√†o! T√¥i l√† th·∫ßy b√≥i Gemini.
ƒê·ªÉ xem ch√≠nh x√°c v·∫≠n m·ªánh, 
t√¥i c·∫ßn bi·∫øt th√™m th√¥ng tin c·ªßa b·∫°n.''');
  }

  Future<void> sendMessage(String message) async {
    if (message.trim().isEmpty) return;

    try {
      _addUserMessage(message);
      _context.updateUserProfile(message);

      // Ki·ªÉm tra v√† x·ª≠ l√Ω th√¥ng tin c√≤n thi·∫øu
      String additionalPrompt = _context.generateMissingInformationPrompt();
      if (additionalPrompt.isNotEmpty) {
        _addSystemMessage(additionalPrompt);
        return;
      }

      _isLoading = true;
      notifyListeners();

      await _generateIntelligentResponse(message);
    } catch (e) {
      _addSystemMessage('C√≥ l·ªói x·∫£y ra. H√£y th·ª≠ l·∫°i.');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> _generateIntelligentResponse(String message) async {
    final enrichedPrompt = _buildContextualPrompt(message);
    final response = await _sendMessage.execute(enrichedPrompt);
    _addSystemMessage(response.text);
  }

  String _buildContextualPrompt(String newMessage) {
    final context = _context.getAccumulatedContext();
    final userInfo = [
      _context.userProfile['name'] != null
          ? 't√™n ${_context.userProfile['name']}'
          : null,
      _context.userProfile['birthYear'] != null
          ? 'sinh nƒÉm ${_context.userProfile['birthYear']}'
          : null,
      _context.userProfile['gender'] != null
          ? 'gi·ªõi t√≠nh ${_context.userProfile['gender']}'
          : null,
    ].where((item) => item != null).join(', ');

    return '''
TH√îNG TIN NG∆Ø·ªúI XEM: ${userInfo.isNotEmpty ? userInfo : 'ch∆∞a r√µ'}

KH√îNG KH√ç CU·ªòC THO·∫†I: 
${_context.currentTopics.isNotEmpty ? 'ƒêang t·∫≠p trung v√†o ${_context.currentTopics.join(', ')}' : 'Tr√≤ chuy·ªán t·ª± do'}

M·∫†CH TRUY·ªÜN: $context

L·ªúI NH·∫ÆN M·ªöI: $newMessage

C√ÅCH TR·∫¢ L·ªúI:
- Gi·ªØ m·∫°ch tr√≤ chuy·ªán t·ª± nhi√™n, uy·ªÉn chuy·ªÉn
- N·∫øu c·∫ßn th√¥ng tin th√™m, h·ªèi m·ªôt c√°ch kh√©o l√©o
- K·∫øt h·ª£p quan s√°t th·ª±c t·∫ø v·ªõi tri th·ª©c huy·ªÅn b√≠
''';
  }

  Future<void> retryMessage(String failedMessage) async {
    try {
      final index = _messages.indexWhere(
        (msg) => msg.text == failedMessage && msg.isError,
      );
      if (index != -1) {
        _messages.removeAt(index);
        notifyListeners();
        await sendMessage(failedMessage);
      }
    } catch (e) {
      _addSystemMessage(
        'G·ª≠i tin nh·∫Øn th·∫•t b·∫°i. Tap ƒë·ªÉ th·ª≠ l·∫°i.',
        isError: true,
      );
    }
  }

  void _addMessage(ChatMessage message) {
    if (_messages.length >= MESSAGE_LIMIT) {
      _messages.removeLast();
    }
    _messages.insert(0, message);
    notifyListeners();
  }

  void _addUserMessage(String text) {
    _addMessage(ChatMessage(text: text, isUser: true));
  }

  void _addSystemMessage(String text, {bool isError = false}) {
    _addMessage(ChatMessage(text: text, isUser: false, isError: isError));
  }

  List<ChatMessage> get messages => _messages;
  bool get isLoading => _isLoading;
}

class ConversationContext {
  Map<String, dynamic> _userProfile = {
    'name': null,
    'birthYear': null,
    'gender': null,
    'birthTime': null,
  };

  final List<String> _accumulatedContext = [];
  List<String> _currentTopics = [];
  int _conversationDepth = 0;

  static const Map<String, List<String>> _topicMappings = {
    't·ª≠ vi': ['t·ª≠ vi', 'tu·ªïi', 'sinh nƒÉm', 'm·ªánh', 'cung'],
    'duy√™n s·ªë': ['t√¨nh y√™u', 'h√¥n nh√¢n', 'quan h·ªá', 'k·∫øt n·ªëi'],
    'v·∫≠n m·ªánh': ['s·ªë ph·∫≠n', 'ƒë·ªãnh m·ªánh', 't∆∞∆°ng lai'],
    's·ª± nghi·ªáp': ['c√¥ng vi·ªác', 'ngh·ªÅ nghi·ªáp', 'ƒë·ªãnh h∆∞·ªõng'],
    't√¢m s·ª±': ['bu·ªìn', 'vui', 'stress', 'lo l·∫Øng', 'h·∫°nh ph√∫c'],
    'ƒë·ªùi s·ªëng': ['s·ª©c kh·ªèe', 'gia ƒë√¨nh', 'h·ªçc t·∫≠p', 'cu·ªôc s·ªëng'],
    'l·ªùi khuy√™n': ['n√™n', 'kh√¥ng n√™n', 'khuy√™n', 't∆∞ v·∫•n'],
  };

  void updateUserProfile(String message) {
    final lowercaseMessage = message.toLowerCase();

    // Tr√≠ch xu·∫•t nƒÉm sinh
    final birthYearMatch = RegExp(r'(19|20)\d{2}').firstMatch(message);
    if (birthYearMatch != null) {
      _userProfile['birthYear'] = birthYearMatch.group(0);
    }

    // Tr√≠ch xu·∫•t t√™n
    final nameMatch = RegExp(r't√™n (c·ªßa )?t√¥i l√† (\w+)').firstMatch(message);
    if (nameMatch != null) {
      _userProfile['name'] = nameMatch.group(2);
    }

    // Tr√≠ch xu·∫•t gi·ªõi t√≠nh
    final genderMatch = RegExp(r'(nam|n·ªØ)').firstMatch(lowercaseMessage);
    if (genderMatch != null) {
      _userProfile['gender'] = genderMatch.group(0);
    }

    final birthTimeMatch = RegExp(
      r'(\d{1,2})\s*(gi·ªù|h)',
    ).firstMatch(lowercaseMessage);
    if (birthTimeMatch != null) {
      _userProfile['birthTime'] = birthTimeMatch.group(1);
    }

    _updateTopics(message);
    _updateContext(message);
    _conversationDepth++;
  }

  String generateMissingInformationPrompt() {
    final missingFields = _userProfile.entries
        .where((entry) => entry.value == null)
        .map((entry) => _getFieldDescription(entry.key))
        .toList();

    return missingFields.isEmpty
        ? ''
        : 'H√£y cho th·∫ßy bi·∫øt con l√† ai: ${missingFields.join(', ')}';
  }

  String _getFieldDescription(String field) {
    switch (field) {
      case 'name':
        return 'T√™n c·ªßa b·∫°n (theo c·∫•u tr√∫c "T√™n t√¥i l√†...")';
      case 'birthYear':
        return 'NƒÉm sinh';
      case 'gender':
        return 'Gi·ªõi t√≠nh';
      case 'birthTime':
        return 'Gi·ªù sinh';
      default:
        return field;
    }
  }

  void _updateTopics(String message) {
    _currentTopics = _topicMappings.entries
        .where(
          (entry) => entry.value.any(
            (topic) => message.toLowerCase().contains(topic),
          ),
        )
        .map((e) => e.key)
        .toList();
  }

  List<String> extractKeywords(String message) {
    return _topicMappings.entries
        .expand(
          (entry) => entry.value.where(
            (topic) => message.toLowerCase().contains(topic),
          ),
        )
        .toList();
  }

  double assessMessageComplexity(String message) {
    final wordCount = message.split(' ').length;
    final sentenceCount = message.split(RegExp(r'[.!?]')).length;
    return wordCount / (sentenceCount > 0 ? sentenceCount : 1);
  }

  String getAccumulatedContext() {
    return _accumulatedContext.join(' | ');
  }

  Map<String, dynamic> get userProfile => _userProfile;
  List<String> get currentTopics => _currentTopics;
  int get conversationDepth => _conversationDepth;

  String _analyzeConversationTone(String message) {
    message = message.toLowerCase();
    if (message.contains('bu·ªìn') || message.contains('kh·ªï')) return 't√¢m s·ª±';
    if (message.contains('l√†m sao') || message.contains('n√™n')) return 't∆∞ v·∫•n';
    if (message.contains('t∆∞∆°ng lai') || message.contains('s·∫Ω'))
      return 'ti√™n ƒëo√°n';
    return 'tr√≤ chuy·ªán';
  }

  void _updateContext(String message) {
    _accumulatedContext.insert(0, message);
    if (_accumulatedContext.length > 5) {
      _accumulatedContext.removeLast();
    }

    // Ph√¢n t√≠ch t√¥ng gi·ªçng cu·ªôc tr√≤ chuy·ªán
    String tone = _analyzeConversationTone(message);
    _conversationMood = tone;
  }

  String _conversationMood = 'tr√≤ chuy·ªán';

  String getConversationInsights() {
    return '''
T√¢m tr·∫°ng: $_conversationMood
ƒê·ªô s√¢u: ${_conversationDepth > 3 ? 'ƒë√£ th√¢n thi·∫øt' : 'm·ªõi quen'}
''';
  }
}
